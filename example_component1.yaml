esphome:
  name: some-name
  friendly_name: "Some friendly Name"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "some#autogenerated#secret1"

ota:
  - platform: esphome
    password: "some#autogenerated#secret2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Some Fallback Hotspot"
    password: "some#autogenerated#secret3"

captive_portal:

### Everything above this line is autogenerated by ESPHome ###

# This example shows how to use the component to define a control for the NAD C 389 amplifier

# Define a UART bus and give it an ID
uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200
  id: uart_bus

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  # Don't log to uart: we need it! (this is for little boards like the d1_mini_lite)
  baud_rate: 0
  
# Define the Read Line Sensor based on the UART bus
external_components:
  - source:
      type: git
      url: https://github.com/wez/ESPHome-UART-Read-Line-Sensor
    components:
      - uart_read_line_sensor

interval:
  # On boot, and periodically thereafter, query the state, in case
  # we have been jiggled loose or attached to a different device
  - interval: 15min
    then:
      - uart.write: "\rMain.Model?\r"
      - delay: 1s
      - uart.write: "\rMain.Power?\r"
      - delay: 1s
      - uart.write: "\rMain.SpeakerA?\r"
      - delay: 1s
      - uart.write: "\rMain.SpeakerB?\r"
      - delay: 1s
      - uart.write: "\rMain.Mute?\r"
      - delay: 1s
      - uart.write: "\rMain.Source?\r"
      - delay: 1s
      - uart.write: "\rMain.Volume?\r"
      - delay: 1s
      - uart.write: "\rMain.VolumePercent?\r"

mapping:
  - id: c389_source_name_to_index
    from: string
    to: int
    entries:
      "Optical 1": 1
      "Optical 2": 2
      "Coaxial 1": 3
      "Coaxial 2": 4
      "Phono": 5
      "Line 1": 6
      "Line 2": 7
      "HDMI eARC": 8
      "BluOS": 9
      "Bluetooth": 10    

text_sensor:
  - platform: uart_read_line_sensor
    uart_id: uart_bus
    name: "last_uart_read"
    id: "uart_readline"
    on_value:
      then:
        - lambda: |-
              size_t eq = x.find("=");
              if (eq == std::string::npos) {
                return;
              }
              std::string key = x.substr(0, eq);
              std::string value = x.substr(eq + 1);

              ESP_LOGI("NAD", "key is '%s' and value is '%s'", key.c_str(), value.c_str());

              if (key == "Main.Volume") {
                id(current_volume).publish_state(atof(value.c_str()));
                return; 
              }

              if (key == "Main.VolumePercent") {
                id(current_volume_pct).publish_state(atoi(value.c_str()));
                return;
              }
              
              if (key == "Main.Model") {
                id(model).publish_state(value);
                return;
              }

              if (key == "Main.Source") {
                int src = atoi(value.c_str());
                for (auto const &it: c389_source_name_to_index) {
                  if (it.second == src) {
                    id(current_source).publish_state(it.first);
                    return;
                  }
                }
                ESP_LOGI("NAD", "unknown source index %d", src);
                return;
              }

              if (key == "Main.Power") {
                id(power).publish_state(value == "On");
                return;
              }

              if (key == "Main.SpeakerA") {
                id(speaker_a).publish_state(value == "On");
                return;
              }

              if (key == "Main.SpeakerB") {
                id(speaker_b).publish_state(value == "On");
                return;
              }

              if (key == "Main.Mute") {
                id(mute).publish_state(value == "On");
                return;
              }

              return;
  - platform: template
    id: model
    name: Model


number:
  - platform: template
    name: "Current Volume"
    id: current_volume
    min_value: -70
    max_value: 0
    unit_of_measurement: "dB"
    step: 0.5
    icon: "mdi:volume-high"
    set_action:
      then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = "\rMain.Volume=" + std::to_string(x) + "\r";
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 
  - platform: template
    name: "Current Volume %"
    id: current_volume_pct
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    step: 1
    icon: "mdi:volume-high"
    set_action:
      then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
              std::size_t pos;
              std::string str = "\rMain.VolumePercent=" + std::to_string(x) + "\r";
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 

button:
  - platform: template
    name: "Vol Up"
    icon: "mdi:volume-plus"
    on_press:
      - uart.write: "\rMain.Volume+\r"

  - platform: template
    name: "Vol Down"
    icon: "mdi:volume-minus"
    on_press:
      - uart.write: "\rMain.Volume-\r"

select:
  - platform: template
    id: current_source
    name: "Source"
    options:
      - Optical 1
      - Optical 2
      - Coaxial 1
      - Coaxial 2 
      - Phono 
      - Line 1 
      - Line 2 
      - HDMI eARC
      - Bluetooth
    set_action: 
      then:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              int src = c389_source_name_to_index[x];
              std::string str = "\rMain.Source=" + std::to_string(src) + "\r";
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec; 

switch:
  - platform: template
    id: power
    name: "Power"
    icon: "mdi:audio-video"
    restore_mode: DISABLED
    turn_on_action:
      - uart.write: "\rMain.Power=On\r"
    turn_off_action:
      - uart.write: "\rMain.Power=Off\r"

  - platform: template
    id: speaker_a
    name: "Speaker A"
    icon: "mdi:speaker"
    restore_mode: DISABLED
    turn_on_action:
      - uart.write: "\rMain.SpeakerA=On\r"
    turn_off_action:
      - uart.write: "\rMain.SpeakerA=Off\r"

  - platform: template
    id: speaker_b
    name: "Speaker B"
    icon: "mdi:speaker"
    restore_mode: DISABLED
    turn_on_action:
      - uart.write: "\rMain.Speakerb=On\r"
    turn_off_action:
      - uart.write: "\rMain.Speakerb=Off\r"

  - platform: template
    id: mute
    name: "Mute"
    icon: "mdi:volume-off"
    restore_mode: DISABLED
    turn_on_action:
      - uart.write: "\rMain.Mute=On\r"
    turn_off_action:
      - uart.write: "\rMain.Mute=Off\r"
